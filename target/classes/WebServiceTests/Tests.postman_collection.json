{
	"info": {
		"_postman_id": "e3be6338-ea83-4115-9ce7-d1d20784dedd",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. City",
			"item": [
				{
					"name": "Create city Minsk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"City name is correct\", () => \r",
									"  pm.expect(pm.response.json().cityName).to.equal(\"Minsk\"));\r",
									"\r",
									"  pm.test(\"id was assigned\", () => \r",
									"  pm.expect(pm.response.json().id).to.be.not.null);\r",
									"\r",
									"  pm.test(\"success status\", () => pm.response.to.be.success);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "cityName",
								"value": "zzz",
								"type": "text",
								"disabled": true
							},
							{
								"key": "cityName",
								"value": "zzz",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cityName\": \"Minsk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/city/create/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"city",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success status\", () => pm.response.to.be.success );\r",
									"\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject1 = {\r",
									"    \"id\": 1,\r",
									"    \"cityName\": \"Kiev\"\r",
									"  };\r",
									"\r",
									"    const expectedObject2 = {\r",
									"    \"id\": 2,\r",
									"    \"cityName\": \"Moscow\"\r",
									"  };\r",
									"\r",
									"    const expectedObject3 = {\r",
									"    \"id\": 3,\r",
									"    \"cityName\": \"Ufa\"\r",
									"  };\r",
									"\r",
									"    const expectedObject4 = {\r",
									"    \"id\": 4,\r",
									"    \"cityName\": \"Omsk\"\r",
									"  };\r",
									"\r",
									"    const expectedObject5 = {\r",
									"    \"id\": 5,\r",
									"    \"cityName\": \"Minsk\"\r",
									"  };\r",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject1);\r",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject2);\r",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject3);\r",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject4);\r",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/city/all/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"city",
								"all",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update city Minsk to Surgut",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success status\", () => pm.response.to.be.success );\r",
									"\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"id\": 5,\r",
									"    \"cityName\": \"Surgut\"\r",
									"  };\r",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cityName\" : \"Surgut\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/city/editbyid/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"city",
								"editbyid",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete city Surgut",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success status\", () => pm.response.to.be.success);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"City with ID 5 is deleted\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/city/deletebyid/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"city",
								"deletebyid",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create cargo with size 150",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"  pm.test(\"id was assigned\", () => \r",
							"  pm.expect(pm.response.json().id).to.be.not.null);\r",
							"\r",
							"pm.test(\"Size is 150\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.size).to.eql(150);\r",
							"});\r",
							"\r",
							"  pm.test(\"success status\", () => pm.response.to.be.success);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"size\": \"150\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/cargo/create/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cargo",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Read all cargos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Success status\", () => pm.response.to.be.success );\r",
							"\r",
							"\r",
							"pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject1 = {\r",
							"    \"id\": 1,\r",
							"    \"size\": 1130\r",
							"  };\r",
							"\r",
							"    const expectedObject2 = {\r",
							"    \"id\": 2,\r",
							"    \"size\": 570\r",
							"  };\r",
							"\r",
							"    const expectedObject3 = {\r",
							"    \"id\": 3,\r",
							"    \"size\": 666\r",
							"  };\r",
							"\r",
							"    const expectedObject4 = {\r",
							"    \"id\": 4,\r",
							"    \"size\": 999\r",
							"  };\r",
							"\r",
							"      const expectedObject5 = {\r",
							"    \"id\": 5,\r",
							"    \"size\": 150\r",
							"  };\r",
							"\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject1);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject2);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject3);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject4);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/cargo/all/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cargo",
						"all",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update size 150 to 123 for cargo 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Success status\", () => pm.response.to.be.success );\r",
							"\r",
							"pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject = {\r",
							"    \"id\": 3,\r",
							"    \"size\": 123\r",
							"  };\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"size\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/cargo/editbyid/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cargo",
						"editbyid",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete cargo 3 with size 123",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Success status\", () => pm.response.to.be.success);\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Cargo with ID 3 is deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/cargo/deletebyid/3/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cargo",
						"deletebyid",
						"3",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create distance (id 7)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"  pm.test(\"id was assigned\", () => \r",
							"  pm.expect(pm.response.json().id).to.be.not.null);\r",
							"\r",
							"  pm.test(\"Success status\", () => pm.response.to.be.success);\r",
							"\r",
							"  pm.test(\"Distance is 345\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.size).to.eql(345);\r",
							"});\r",
							"\r",
							"  pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject =  {\r",
							"    \"id\": 7,\r",
							"    \"city1\": {\r",
							"        \"id\": 3,\r",
							"        \"cityName\": null,\r",
							"        \"createdAt\": null,\r",
							"        \"changedAt\": null\r",
							"    },\r",
							"    \"city2\": {\r",
							"        \"id\": 4,\r",
							"        \"cityName\": null,\r",
							"        \"createdAt\": null,\r",
							"        \"changedAt\": null\r",
							"    },\r",
							"    \"distance\": 345\r",
							"};\r",
							"\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"city1\": {\r\n            \"id\": 3\r\n        },\r\n        \"city2\": {\r\n            \"id\": 4\r\n        },\r\n        \"distance\": 345\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/distance/create/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"distance",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Read all distances",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Success status\", () => pm.response.to.be.success );\r",
							"\r",
							"pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject1 =  {\r",
							"        \"id\": 1,\r",
							"        \"city1\": {\r",
							"            \"id\": 1,\r",
							"            \"cityName\": \"Kiev\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 2,\r",
							"            \"cityName\": \"Moscow\"\r",
							"        },\r",
							"        \"distance\": 857\r",
							"    };\r",
							"\r",
							"    const expectedObject2 =  {\r",
							"        \"id\": 2,\r",
							"        \"city1\": {\r",
							"            \"id\": 1,\r",
							"            \"cityName\": \"Kiev\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 3,\r",
							"            \"cityName\": \"Ufa\"\r",
							"        },\r",
							"        \"distance\": 2032\r",
							"    };\r",
							"\r",
							"    const expectedObject3 = {\r",
							"        \"id\": 3,\r",
							"        \"city1\": {\r",
							"            \"id\": 1,\r",
							"            \"cityName\": \"Kiev\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 4,\r",
							"            \"cityName\": \"Omsk\"\r",
							"        },\r",
							"        \"distance\": 3261\r",
							"    };\r",
							"\r",
							"    const expectedObject4 = {\r",
							"        \"id\": 4,\r",
							"        \"city1\": {\r",
							"            \"id\": 2,\r",
							"            \"cityName\": \"Moscow\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 3,\r",
							"            \"cityName\": \"Ufa\"\r",
							"        },\r",
							"        \"distance\": 1355\r",
							"    };\r",
							"\r",
							"    const expectedObject5 = {\r",
							"        \"id\": 5,\r",
							"        \"city1\": {\r",
							"            \"id\": 2,\r",
							"            \"cityName\": \"Moscow\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 4,\r",
							"            \"cityName\": \"Omsk\"\r",
							"        },\r",
							"        \"distance\": 2743\r",
							"    };\r",
							"\r",
							"     const expectedObject6 = {\r",
							"        \"id\": 6,\r",
							"        \"city1\": {\r",
							"            \"id\": 3,\r",
							"            \"cityName\": \"Ufa\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 4,\r",
							"            \"cityName\": \"Omsk\"\r",
							"        },\r",
							"        \"distance\": 1346\r",
							"    };\r",
							"\r",
							"         const expectedObject7 = {\r",
							"        \"id\": 7,\r",
							"        \"city1\": {\r",
							"            \"id\": 3,\r",
							"            \"cityName\": \"Ufa\"\r",
							"        },\r",
							"        \"city2\": {\r",
							"            \"id\": 4,\r",
							"            \"cityName\": \"Omsk\"\r",
							"        },\r",
							"        \"distance\": 345\r",
							"    };\r",
							"\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject1);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject2);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject3);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject4);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject5);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject6);\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject7);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/distance/all/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"distance",
						"all",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update distance with ID 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Success status\", () => pm.response.to.be.success );\r",
							"\r",
							"pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject = {\r",
							"    \"id\": 7,\r",
							"    \"city1\": {\r",
							"        \"id\": 2,\r",
							"        \"cityName\": \"Moscow\"\r",
							"    },\r",
							"    \"city2\": {\r",
							"        \"id\": 3,\r",
							"        \"cityName\": \"Ufa\"\r",
							"    },\r",
							"    \"distance\": 999\r",
							"};\r",
							"  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"city1\": {\n            \"id\": 2\n        },\n        \"city2\": {\n            \"id\": 3\n        },\n        \"distance\": 999\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/distance/editbyid/7/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"distance",
						"editbyid",
						"7",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete distance with ID 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Success status\", () => pm.response.to.be.success);\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Distance with ID 7 is deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/distance/deletebyid/7/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"distance",
						"deletebyid",
						"7",
						""
					]
				}
			},
			"response": []
		}
	]
}